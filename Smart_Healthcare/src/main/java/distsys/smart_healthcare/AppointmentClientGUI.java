/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package distsys.smart_healthcare;

/**
 *
 * @author vinicius
 */
import generated.grpc.AppointmentService.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

import javax.swing.*;
import java.awt.*;
import java.util.concurrent.CountDownLatch;

public class AppointmentClientGUI extends javax.swing.JFrame {

    /**
     * Creates new form AppointmentClientGUI
     */
    // gRPC stubs for blocking and async calls
    private final AppointmentServiceGrpc.AppointmentServiceBlockingStub blockingStub;
    private final AppointmentServiceGrpc.AppointmentServiceStub asyncStub;

    public AppointmentClientGUI() {
        initComponents();

        // 1. Establish connection to gRPC server
        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // No SSL
                .build();

        // 2. Create stubs from the generated proto service
        blockingStub = AppointmentServiceGrpc.newBlockingStub(channel);
        asyncStub = AppointmentServiceGrpc.newStub(channel);

        // 3. Set up GUI
        setTitle("Smart Healthcare - Appointment System");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Create tabs
        JTabbedPane tabs = new JTabbedPane();
        tabs.add("üìÜ Schedule Appointment", createSchedulePanel());
        tabs.add("üîç Get Appointment", createGetPanel());
        tabs.add("üìã Get Availability", createAvailabilityPanel());

        add(tabs);
        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Panel for scheduling an appointment
    private JPanel createSchedulePanel() {
        JPanel panel = new JPanel(new GridLayout(5, 2));

        JTextField patientField = new JTextField();
        JTextField doctorField = new JTextField();
        JTextField dateTimeField = new JTextField();
        JTextArea responseArea = new JTextArea();
        responseArea.setLineWrap(true);

        JButton sendBtn = new JButton("Schedule");

        // Action when "Schedule" button is clicked
        sendBtn.addActionListener(e -> {
            AppointmentRequest request = AppointmentRequest.newBuilder()
                    .setPatientId(patientField.getText())
                    .setDoctorId(doctorField.getText())
                    .setDateTime(dateTimeField.getText())
                    .build();

            // Unary RPC call
            AppointmentResponse response = blockingStub.scheduleAppointment(request);
            responseArea.setText(response.getMessage());
        });

        // Add UI components to the panel
        panel.add(new JLabel("Patient ID:"));
        panel.add(patientField);
        panel.add(new JLabel("Doctor ID:"));
        panel.add(doctorField);
        panel.add(new JLabel("Date & Time:"));
        panel.add(dateTimeField);
        panel.add(sendBtn);
        panel.add(new JLabel("Response:"));
        panel.add(new JScrollPane(responseArea));

        return panel;
    }

    // Panel for getting an appointment by ID
    private JPanel createGetPanel() {
        JPanel panel = new JPanel(new GridLayout(4, 1));

        JTextField idField = new JTextField();
        JButton getBtn = new JButton("Get Appointment");
        JTextArea responseArea = new JTextArea();
        responseArea.setLineWrap(true);

        // Action when "Get Appointment" is clicked
        getBtn.addActionListener(e -> {
            AppointmentIdRequest request = AppointmentIdRequest.newBuilder()
                    .setAppointmentId(idField.getText())
                    .build();

            // Unary RPC call
            AppointmentResponse response = blockingStub.getAppointment(request);
            responseArea.setText(response.getMessage());
        });

        // Add UI components to the panel
        panel.add(new JLabel("Appointment ID:"));
        panel.add(idField);
        panel.add(getBtn);
        panel.add(new JScrollPane(responseArea));

        return panel;
    }

    // Panel for streaming doctor availability
    private JPanel createAvailabilityPanel() {
        JPanel panel = new JPanel(new BorderLayout());

        // Top input bar
        JPanel inputPanel = new JPanel(new FlowLayout());
        JTextField doctorField = new JTextField(10);
        JButton getBtn = new JButton("Check Availability");

        inputPanel.add(new JLabel("Doctor ID:"));
        inputPanel.add(doctorField);
        inputPanel.add(getBtn);

        // Output area for stream results
        JTextArea responseArea = new JTextArea();
        responseArea.setLineWrap(true);
        JScrollPane scrollPane = new JScrollPane(responseArea);

        // Streaming call when button clicked
        getBtn.addActionListener(e -> {
            responseArea.setText("Fetching...\n");

            AvailabilityRequest request;
            request = AvailabilityRequest.newBuilder()
                    .setDoctorId(doctorField.getText())
                    .build();

            // Async server-streaming call
            asyncStub.getAvailability(request, new StreamObserver<AvailabilityResponse>() {
                @Override
                public void onNext(AvailabilityResponse value) {
                    // Called on each response chunk
                    SwingUtilities.invokeLater(()
                            -> responseArea.append("üïì Available: " + value.getDateTime() + "\n")
                    );
                }

                @Override
                public void onError(Throwable t) {
                    SwingUtilities.invokeLater(()
                            -> responseArea.append("‚ùå Error: " + t.getMessage() + "\n")
                    );
                }

                @Override
                public void onCompleted() {
                    SwingUtilities.invokeLater(()
                            -> responseArea.append("‚úÖ End of availability list.\n")
                    );
                }
            });
        });

        // Build final layout
        panel.add(inputPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        return panel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
